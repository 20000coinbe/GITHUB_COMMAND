0. Init
 - git : 설치 및 명령어 확인
 - git --version : 버전확인

1.전역설정
 - git config --global user.name [유저이름] : 이름 등록
 - git config --global user.email [유저이메일] : 이메일 등록
 - (선택) git config --global color.ui "auto" : 터미널내용 컬러로 표기

2.GitHub.com에서 디렉터리 생성

3.PC와 동기화(PC내 해당 디렉터리로 이동 후 사용)
 - git clone [2번에서 생성한 디렉터리 주소] : 원격저장소를 복제하여 저장소를 생성
 - 숨겨져있는 '.git'이라는 폴더확인

4. 받아온 GITHIB_COMMAD에서 작업

5. 원격저장소에 올리기(working dir -> Staging Area -> Local Repository -> 원격저장소)
 - git add [파일/디렉터리명] : Staging Area 상태로 변경
 - git commit [-m] ["메시지"] : Local Repository상태로 변경, "메시지 작성습관"
   5.1 commit 메시지 변경
    - git commit --amend : 메시지 수정, 리눅스 vi(m)과 유사한 커멘드 

 - git push : commit상태의 모든 내용을 원격저장소로 보내기
              옵션 : git push -f : 강제 push
 5.2 Commit 상태 되돌리기
  - 
  - git reset [--hard/--soft] Commit해쉬값 : git log를 통해서 얻은 해쉬값을 사용해 이전에 있던 Commit들 중 하나로 돌아 갈 수 있다
    --hard : 선택한 Commit을 제외하고 모두 지운 상태로 reset
    --soft : 선택한 Commit 이후의 기록을 유지한 상태로 reset
    --mixed : ....

6. 원격저장소에서 내려받기
 - git fetch : 원격저장소의 변경사항을 가져와 갱신
 - git merge : Local Repository의 내용을 working dir로 갱신
 - git pull : fetch와 merge의 기능을 한번에 사용, 주로 사용


7. 로그
 - git log : 로그(내역) 확인

8. 브랜치 : 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 해주는 기능(서로 영향을 받지 X)
 8.1 구성
  - Master Branch : git저장소를 만들 때 자동으로 생성, 일반적으로 배포가 가능한 수준의 안정화된 버전
                    Master Branch는 항상 안정화된 상태를 유지!!!!!!
  - 토픽 브랜치 : 특정한 기능을 위해 만들어진 브랜치
   ex) Develop Branch : 특정 개발시점에 생성하는 브랜치 
       Bug Fix Branch : 버그 수정을 위한 브랜치, 해결이 되면 Master와 병합

 - git branch [브랜치 이름] : 브랜치 생성 및 현재 브랜치
 - git checkout [브랜치 이름] : 브랜치 이동